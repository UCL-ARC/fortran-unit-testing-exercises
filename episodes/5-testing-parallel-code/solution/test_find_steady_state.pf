!> Module for testing the subroutine game_of_life::find_steady_state
module test_find_steady_state
    use game_of_life_mod, only : find_steady_state
    ! allow(C121)
    use pfunit
    implicit none

    public

    !> Type to bundle inputs and expected outputs of game_of_life::find_steady_state
    @testParameter
    type, extends(MPITestParameter) :: find_steady_state_test_params
        !> The global board to be distributed across ranks
        integer, dimension(:,:), allocatable :: input_global_board
        !> The expected steady state result
        logical :: expected_steady_state
        !> The expected number of generations to reach steady state
        integer :: expected_generation_number
    end type find_steady_state_test_params

    !> Type to define a single find_steady_state test case
    @TestCase(testParameters={getTestSuite()}, constructor=paramsToCase)
    type, extends(MPITestCase) :: find_steady_state_test_case
        type(find_steady_state_test_params) :: params
    end type find_steady_state_test_case

contains

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Test Suites
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !> Test suite for the game_of_life::find_steady_state subroutine
    function getTestSuite() result(params)
        !> The array of test parameters
        type(find_steady_state_test_params), allocatable :: params(:)

        integer :: max_num_ranks, num_ranks, rank, i

        logical :: expected_steady_state
        integer :: expected_generation_number
        integer, dimension(:,:), allocatable :: global_board

        max_num_ranks = 8
        allocate(params(max_num_ranks))

        !  Steady state should be reached after 17 iterations
        !       8  9 10 11 12
        !      -- -- -- -- --
        !   8 | 0  0  0  0  0
        !   9 | 0  0  1  0  0
        !  10 | 0  1  1  1  0
        !  11 | 0  1  0  1  0
        !  12 | 0  0  1  0  0
        !  13 | 0  0  0  0  0
        ! global_board only needs to be set for rank 0 as this should be distributed to other ranks in the src code
        expected_steady_state = .true.
        expected_generation_number = 17
        allocate(global_board(31, 31))
        global_board = 0
        global_board(9,9:11)  = [0,1,0]
        global_board(10,9:11) = [1,1,1]
        global_board(11,9:11) = [1,0,1]
        global_board(12,9:11) = [0,1,0]

        do i = 1, max_num_ranks
            params(i) = find_steady_state_test_params(i, global_board, expected_steady_state, expected_generation_number)
        end do
    end function getTestSuite

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Assertion functions
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !> Check for the expected output of the game_of_life::find_steady_state subroutine
    @Test
    subroutine TestFindSteadyState(this)
        !> The current test case including inputs and expected outputs
        class(find_steady_state_test_case), intent(inout) :: this

        logical :: actual_steady_state
        integer :: actual_generation_number

        call find_steady_state(actual_steady_state, actual_generation_number, this%params%input_global_board, &
            size(this%params%input_global_board, 1), size(this%params%input_global_board, 2), this%getMpiCommunicator(), &
            this%getNumProcessesRequested())

        @assertEqual(this%params%expected_generation_number, actual_generation_number, "Unexpected generation_number")

        @assertTrue(this%params%expected_steady_state .eqv. actual_steady_state, "Unexpected steady_state value")

    end subroutine TestFindSteadyState

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Constructors
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !> Constructor for find_steady_state_test_case
    function paramsToCase(testParameter) result(tst)
        !> The test parameters for the new test case
        type(find_steady_state_test_params), intent(in) :: testParameter
        !> The new test case
        type(find_steady_state_test_case) :: tst

        tst%params = testParameter
    end function paramsToCase
end module test_find_steady_state
