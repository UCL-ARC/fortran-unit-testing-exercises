!> Module for testing the subroutine game_of_life::find_steady_state
module test_find_steady_state
    use game_of_life_mod, only : find_steady_state
    ! allow(C121)
    use pfunit
    implicit none

    public

    !> Type to bundle inputs and expected outputs of game_of_life::find_steady_state
    @testParameter(constructor=new_find_steady_state_test_params)
    type, extends(MPITestParameter) :: find_steady_state_test_params
        integer, dimension(:,:,:), allocatable :: global_board

        ! These will be the same for all ranks
        logical :: expected_steady_state
        integer :: expected_generation_number
        integer :: global_ny, global_nx
    end type find_steady_state_test_params

    !> Type to define a single find_steady_state test case
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(MPITestCase) :: find_steady_state_test_case
        type(find_steady_state_test_params) :: params
    end type find_steady_state_test_case

contains

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Test Suites
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !> Test suite for the game_of_life::find_steady_state subroutine
    function getParameters() result(params)
        type(find_steady_state_test_params), allocatable :: params(:)

        integer :: max_num_ranks, num_ranks, rank, i

        logical :: expected_steady_state
        integer :: expected_generation_number
        integer, dimension(:,:,:), allocatable :: global_board
        integer :: global_ny, global_nx

        max_num_ranks = 8
        allocate(params(max_num_ranks))


        !  Steady state should be reached after 17 iterations
        !       8  9 10 11 12
        !      -- -- -- -- --
        !   8 | 0  0  0  0  0
        !   9 | 0  0  1  0  0
        !  10 | 0  1  1  1  0
        !  11 | 0  1  0  1  0
        !  12 | 0  0  1  0  0
        !  13 | 0  0  0  0  0
        ! global_board only needs to be set for rank 0 as this should be distributed to other ranks in the src code
        expected_steady_state = .true.
        expected_generation_number = 17
        global_ny = 31
        global_nx = 31
        allocate(global_board(global_nx,global_ny,max_num_ranks))
        global_board = 0
        global_board(9,9:11,1)  = [0,1,0]
        global_board(10,9:11,1) = [1,1,1]
        global_board(11,9:11,1) = [1,0,1]
        global_board(12,9:11,1) = [0,1,0]

        do i = 1, max_num_ranks
            params(i) = find_steady_state_test_params(i, global_board, expected_steady_state, expected_generation_number, &
                                                      global_ny, global_nx)
        end do

    end function getParameters

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Assertion functions
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !> Check for the expected output of the game_of_life::find_steady_state subroutine
    @Test
    subroutine TestFindSteadyState(this)
        class(find_steady_state_test_case), intent(inout) :: this

        integer :: rank_index

        logical :: actual_steady_state
        integer :: actual_generation_number

        ! Make a copy of the board in order to match the expected input parameter type
        integer, dimension(:,:), allocatable ::global_board

        rank_index = this%getProcessRank() + 1

        allocate(global_board(size(this%params%global_board, 1), size(this%params%global_board, 2)))
        global_board = this%params%global_board(:,:,rank_index)

        call find_steady_state(actual_steady_state, actual_generation_number, global_board, this%params%global_ny, &
            this%params%global_nx, this%getMpiCommunicator(), this%getNumProcessesRequested())

        @assertEqual(this%params%expected_generation_number, actual_generation_number, "Unexpected generation_number")
        if (this%params%expected_steady_state) then
            @assertTrue(actual_steady_state, "Unexpected steady_state value")
        else
            @assertFalse(actual_steady_state, "Unexpected steady_state value")
        end if
    end subroutine TestFindSteadyState

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Constructors
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    function new_find_steady_state_test_params(global_board, expected_steady_state, expected_generation_number, global_ny, &
                                               global_nx) result(new_params)
        integer, dimension(:,:,:), allocatable, intent(in) :: global_board
        logical, intent(in) :: expected_steady_state
        integer, intent(in) :: expected_generation_number
        integer, intent(in) :: global_ny, global_nx

        type(find_steady_state_test_params) :: new_params

        allocate(new_params%global_board(size(global_board, 1), size(global_board, 2), size(global_board, 3)))

        new_params%global_board = global_board
        new_params%expected_steady_state = expected_steady_state
        new_params%expected_generation_number = expected_generation_number
        new_params%global_ny = global_ny
        new_params%global_nx = global_nx

    end function new_find_steady_state_test_params

    function newTest(testParameter) result(tst)
        type(find_steady_state_test_case) :: tst
        type(find_steady_state_test_params), intent(in) :: testParameter

        tst%params = testParameter
    end function newTest
end module test_find_steady_state
