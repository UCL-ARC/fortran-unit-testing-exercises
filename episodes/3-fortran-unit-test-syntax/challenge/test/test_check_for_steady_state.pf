!> Module for testing the subroutine game_of_life::check_for_steady_state
module test_check_for_steady_state
    use game_of_life_mod, only : check_for_steady_state
    ! allow(C121)
    use funit
    implicit none

    public

    ! TASK: Define a parameter type `check_for_steady_state_test_params` to be used for testing game_of_life::check_for_steady_state
    ! Your changes here...

    ! TASK: Define a test case type `check_for_steady_state_test_case` to be used for testing game_of_life::check_for_steady_state
    ! Your changes here...

contains

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Test Suites
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    ! TASK: Write a function which returns and array of the parameter type you defined above for testing
    !       game_of_life::check_for_steady_state including tests of the following scenarios.
    !
    !       1. Matching boards full of zeros are in steady state
    !       2. Matching boards full of ones are in steady state
    !       3. Matching boards with up to 10 ones are in steady state
    !       4. Mismatched boards with the first all zeros and the other all ones is not in steady state
    !       5. Mismatched boards with the first all zeros and the other all ones is not in steady state
    !       6. Mismatched boards with up to 10 differences is not in steady state
    !
    ! Your changes here...

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Assertion functions
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !> Check for the expected output of the game_of_life::check_for_steady_state subroutine
    @Test
    subroutine TestCheckIfSteadyState(this)
        !> The current test case including inputs and expected outputs
        class(check_for_steady_state_test_case), intent(inout) :: this

        logical :: actual_steady_state

        call check_for_steady_state(this%params%current_board, this%params%new_board, actual_steady_state)

        @assertEqual(this%params%expected_steady_state, actual_steady_state)
    end subroutine TestCheckIfSteadyState

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Constructors
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    ! TASK: Write a function which returns an instance of your new test case type from an inputted
    !       instance of your new parameter type.
    ! Your changes here...

    ! TASK: Write a function which returns your new parameter type as a string. This is used to
    !       decsribe your test scenario in the cli output
    ! Your changes here...

    !> A convenience function to allow the populating of two boards with a random number of 1s and 0s
    !> The two boards can either be created matching or with with different locations for their 1s and 0s.
    subroutine populate_random_boards(board_1, board_2, num_differences, matching)
        !> One of the boards to be randomly populated
        integer, dimension(:,:), allocatable, intent(inout) :: board_1
        !> One of the baords to be randomly populated
        integer, dimension(:,:), allocatable, intent(inout) :: board_2
        !> The number of elements of board_1 to switch to 1.
        integer, intent(in) :: num_differences
        !> If true, board_1 and board_2 will match, otherwise board_2 will have it's ones and zeros inverted
        !> and will have a different random selection of elements set to 0, compared with board_1's 1s.
        logical, intent(in) :: matching

        integer :: nrow, ncol, row, col, rand_row, rand_col, new_board_val
        real :: rand_real

        ! Initialise
        nrow = size(board_1, 1)
        ncol = size(board_1, 2)
        board_1 = 0

        if (matching) then
            board_2 = 0
        else
            board_2 = 1
        end if

        ! For both boards, set to requested number of elements to the opposite value
        do row = 1, num_differences
            ! Get random coordinates for current
            call random_number(rand_real)
            rand_row = 1 + FLOOR(nrow*rand_real) ! n=1 to n=nrow
            call random_number(rand_real)
            rand_col = 1 + FLOOR(ncol*rand_real) ! n=1 to n=ncol

            board_1(rand_row, rand_col) = 1

            if (.not. matching) then
                ! Get random coordinates for new
                call random_number(rand_real)
                rand_row = 1 + FLOOR(nrow*rand_real) ! n=1 to n=nrow
                call random_number(rand_real)
                rand_col = 1 + FLOOR(ncol*rand_real) ! n=1 to n=ncol

                board_2(rand_row, rand_col) = 0
            else
                board_2(rand_row, rand_col) = 1
            end if
        end do

    end subroutine populate_random_boards
end module test_check_for_steady_state
