!> Module for testing the subroutine game_of_life::check_for_steady_state
module test_check_for_steady_state
    use game_of_life_mod, only : check_for_steady_state
    ! allow(C121)
    use funit
    implicit none

    public

    ! TASK: Define a parameter type `check_for_steady_state_test_params` to be used for testing game_of_life::check_for_steady_state
    !> Type to bundle inputs and expected outputs of game_of_life::check_for_steady_state
    @testParameter
    type, extends(AbstractTestParameter) :: check_for_steady_state_test_params
        !> A board representing the current board before the last evolution 
        integer, dimension(:,:), allocatable :: current_board
        !> A board representing the new board after the last evolution 
        integer, dimension(:,:), allocatable :: new_board
        !> The value of steady state expected to be returned with the above boards as inputs
        logical :: expected_steady_state
        !> A description of the test to be outputted for logging
        character(len=100) :: description
    contains
        procedure :: toString => check_for_steady_state_test_params_toString
    end type check_for_steady_state_test_params

    ! TASK: Define a test case type `check_for_steady_state_test_case` to be used for testing game_of_life::check_for_steady_state
    !> Type to define a single check_for_steady_state test case
    @TestCase(testParameters={getParameters()}, constructor=newTest)
    type, extends(ParameterizedTestCase) :: check_for_steady_state_test_case
        type(check_for_steady_state_test_params) :: params
    end type check_for_steady_state_test_case

contains

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Test Suites
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    ! TASK: Write a function which returns and array of the parameter type you defined above for testing
    !       game_of_life::check_for_steady_state including tests of the following scenarios.
    !
    !       1. Matching boards full of zeros are in steady state
    !       2. Matching boards full of ones are in steady state
    !       3. Matching boards with up to 10 ones are in steady state
    !       4. Mismatched boards with the first all zeros and the other all ones is not in steady state
    !       5. Mismatched boards with the first all zeros and the other all ones is not in steady state
    !       6. Mismatched boards with up to 10 differences is not in steady state
    !
    !> Test suite for the game_of_life::check_for_steady_state subroutine
    function getParameters() result(params)
        type(check_for_steady_state_test_params), allocatable :: params(:)

        integer :: nrow, ncol
        integer, dimension(:,:), allocatable :: test_current_board, test_new_board

        allocate(params(6))

        nrow = 31
        ncol = 31

        ! Allocate arrays
        allocate(test_current_board(nrow, ncol))
        allocate(test_new_board(nrow, ncol))

        ! Matching boards
        !  All zeros
        call populate_random_boards(test_current_board, test_new_board, 0, .true.)
        params(1) = check_for_steady_state_test_params(test_current_board, test_new_board, .true., "all zeros")
        !  All ones
        call populate_random_boards(test_current_board, test_new_board, nrow*ncol, .true.)
        params(2) = check_for_steady_state_test_params(test_current_board, test_new_board, .true., "all ones")
        !  Up to 10 ones
        call populate_random_boards(test_current_board, test_new_board, 10, .true.)
        params(3) = check_for_steady_state_test_params(test_current_board, test_new_board, .true., "up to ten ones")

        ! Mismatched boards
        !  All ones vs all zeros
        call populate_random_boards(test_current_board, test_new_board, 0, .false.)
        params(4) = check_for_steady_state_test_params(test_current_board, test_new_board, .false., "all ones and all zeros")
        !  All zeros vs all ones
        call populate_random_boards(test_current_board, test_new_board, nrow*ncol, .false.)
        params(5) = check_for_steady_state_test_params(test_current_board, test_new_board, .false., "all zeros and all ones")
        !  Up to 10 differences
        call populate_random_boards(test_current_board, test_new_board, 10, .false.)
        params(6) = check_for_steady_state_test_params(test_current_board, test_new_board, .false., "up to ten differences")
    end function getParameters

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Assertion functions
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !> Check for the expected output of the game_of_life::check_for_steady_state subroutine
    @Test
    subroutine TestCheckIfSteadyState(this)
        !> The current test case containing inputs and expected outputs.
        class(check_for_steady_state_test_case), intent(inout) :: this

        logical :: actual_steady_state

        call check_for_steady_state(this%params%current_board, this%params%new_board, actual_steady_state)

        @assertEqual(this%params%expected_steady_state, actual_steady_state)
    end subroutine TestCheckIfSteadyState

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Constructors
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    ! TASK: Write a function which returns an instance of your new test case type from an inputted
    !       instance of your new parameter type.
    function newTest(testParameter) result(tst)
        !> The parameters to define the new test case. Must be of type check_for_steady_state_test_params to be picked up by pFUnit
        type(check_for_steady_state_test_params), intent(in) :: testParameter
        !> The test case to be populated with parameters. Must be of type check_for_steady_state_test_case to be picked up by pFUnit
        type(check_for_steady_state_test_case) :: tst

        tst%params = testParameter
    end function newTest

    ! TASK: Write a function which returns your new parameter type as a string. This is used to
    !       decsribe your test scenario in the cli output
    function check_for_steady_state_test_params_toString(this) result(string)
        !> The parameters for this test case.
        class(check_for_steady_state_test_params), intent(in) :: this

        character(:), allocatable :: string

        character(len=80) :: buffer

        integer :: nrow, ncol

        nrow = size(this%current_board, 1)
        ncol = size(this%current_board, 2)

        if (this%expected_steady_state) then
            write(buffer,'("Steady state ", i2, "x", i2, " boards with ", a)') &
                nrow, ncol, trim(this%description)
        else
            write(buffer,'("Non steady state ", i2, "x", i2, " boards with ", a)') &
                nrow, ncol, trim(this%description)
        end if
        string = trim(buffer)
    end function check_for_steady_state_test_params_toString

    !> A convenience function to allow the populating of two boards with a random number of 1s and 0s
    !> The two boards can either be created matching or with with different locations for their 1s and 0s.
    subroutine populate_random_boards(current_board, new_board, num_differences, matching)
        !> One of the boards to be randomly populated
        integer, dimension(:,:), allocatable, intent(inout) :: current_board
        !> One of the baords to be randomly populated
        integer, dimension(:,:), allocatable, intent(inout) :: new_board
        !> The number of elements of board_1 to switch to 1.
        integer, intent(in) :: num_differences
        !> If true, board_1 and board_2 will match, otherwise board_2 will have it's ones and zeros inverted
        !> and will have a different random selection of elements set to 0, compared with board_1's 1s.
        logical, intent(in) :: matching

        integer :: nrow, ncol, row, col, rand_row, rand_col, new_board_val
        real :: rand_real

        ! Initialise
        nrow = size(current_board, 1)
        ncol = size(current_board, 2)
        current_board = 0

        if (matching) then
            new_board = 0
        else
            new_board = 1
        end if

        ! For both boards, set to requested number of elements to the opposite value
        do row = 1, num_differences
            ! Get random coordinates for current
            call random_number(rand_real)
            rand_row = 1 + FLOOR(nrow*rand_real) ! n=1 to n=nrow
            call random_number(rand_real)
            rand_col = 1 + FLOOR(ncol*rand_real) ! n=1 to n=ncol

            current_board(rand_row, rand_col) = 1

            if (.not. matching) then
                ! Get random coordinates for new
                call random_number(rand_real)
                rand_row = 1 + FLOOR(nrow*rand_real) ! n=1 to n=nrow
                call random_number(rand_real)
                rand_col = 1 + FLOOR(ncol*rand_real) ! n=1 to n=ncol

                new_board(rand_row, rand_col) = 0
            else
                new_board(rand_row, rand_col) = 1
            end if


        end do

    end subroutine populate_random_boards
end module test_check_for_steady_state
