module test_read_model_from_file
    use game_of_life_mod, only : read_model_from_file
    use funit

    implicit none

    ! TASK: Define a parameter type `read_model_from_file_test_params` to be used for testing game_of_life::read_model_from_file
    ! Your changes here...

    ! TASK: Define a test case type `read_model_from_file_test_case` to be used for testing game_of_life::read_model_from_file
    ! Your changes here...
contains

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Test Suites
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    ! TASK: Write a function which returns and array of the parameter type you defined above for testing
    !       game_of_life::read_model_from_file including tests of the following scenarios.
    !
    !       1. Reading a valid model (i.e. test-models/zeros_31_31.dat) populates the board as expected
    !       2. Reading a model (test-models/zeros_31_31.dat) with nrow more than nrow_max populates the error message es expected
    !       3. Reading a model (test-models/zeros_31_31.dat) with ncol more than ncol_max populates the error message es expected
    !       4. Reading a model (test-models/empty_-10_10.dat) with nrow less than 1 populates the error message es expected
    !       5. Reading a model (test-models/empty_10_-10.dat) with ncol less than 1 populates the error message es expected
    !       6. Reading a model which doesn't exist populates the error message es expected
    !
    ! Your changes here...

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Assertion functions
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    @Test
    subroutine TestCheckReadModelFromFile(this)
        class (read_model_from_file_test_case), intent(inout) :: this

        integer, dimension(:,:), allocatable :: actual_board
        character(len=:), allocatable :: actual_io_error_message

        call read_model_from_file(this%params%input_fname, this%params%max_nrow, this%params%max_ncol, actual_board, actual_io_error_message)

        if (this%params%model_is_valid) then
            call VerifyCheckReadModelFromFileValidModel(this%params, actual_board, actual_io_error_message)
        else
            call VerifyCheckReadModelFromFileInvalidModel(this%params, actual_board, actual_io_error_message)
        end if
    end subroutine TestCheckReadModelFromFile

    ! TASK: Finish the subroutines below such that they call game_of_life::read_model_from_file and assert 
    !       that, for valid model files, the resultant board is what we expect and, for invalid models, we get
    !       the appropriate error message. Ensure any failure message makes it clear what has failed.

    !> Check for the expected output of the game_of_life::read_model_from_file subroutine called with a valid model
    subroutine VerifyCheckReadModelFromFileValidModel(params, actual_board, actual_io_error_message)
        class (read_model_from_file_test_params), intent(inout) :: params

        integer, dimension(:,:), allocatable, intent(in) :: actual_board
        character(len=:), allocatable, intent(in) :: actual_io_error_message

        ! Your changes here...
    end subroutine VerifyCheckReadModelFromFileValidModel

    !> Check for the expected output of the game_of_life::read_model_from_file subroutine called with an invalid model
    subroutine VerifyCheckReadModelFromFileInvalidModel(params, actual_board, actual_io_error_message)
        class (read_model_from_file_test_params), intent(inout) :: params

        integer, dimension(:,:), allocatable, intent(in) :: actual_board
        character(len=:), allocatable, intent(in) :: actual_io_error_message

        ! Your changes here...
    end subroutine VerifyCheckReadModelFromFileInvalidModel

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Contructors
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    ! TASK: Write a function which returns an instance of your new test case type from an inputted
    !       instance of your new parameter type.
    ! Your changes here...

    ! TASK: Write a function which returns your new parameter type as a string. This is used to
    !       decsribe your test scenario in the cli output
    ! Your changes here...
end module test_read_model_from_file
