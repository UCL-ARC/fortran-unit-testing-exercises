!> Module for testing the subroutine matrix_transforms::transpose
module test_transpose
    use matrix_transforms, only : transpose
    ! allow(C121)
    use funit
    implicit none

    public

    !> Type to bundle inputs and expected outputs of matrix_transforms::transpose
    @testParameter
    type, extends(AbstractTestParameter) :: test_transpose_params
        !> A matrix to be passed into transpose
        real, dimension(:,:), allocatable :: input_matrix
        !> The expected matrix after being passed into transpose
        real, dimension(:,:), allocatable :: expected_output_matrix
        !> A description of the test to be outputted for logging
        character(len=100) :: description
    contains
        procedure :: toString => test_transpose_params_toString
    end type test_transpose_params

    !> Type to define a single transpose test case
    @TestCase(testParameters={test_transpose_testsuite()}, constructor=newTest)
    type, extends(ParameterizedTestCase) :: test_transpose_test_case
        type(test_transpose_params) :: params
    end type test_transpose_test_case

contains

    !> Test suite for the matrix_transforms::transpose subroutine
    function test_transpose_testsuite() result(params)
        !> The array of test parameters
        type(test_transpose_params) :: params(2)

        real, dimension(3,3) :: input_matrix, expected_output_matrix

        input_matrix(1,:) = [1,0,0]
        input_matrix(2,:) = [0,1,0]
        input_matrix(3,:) = [0,0,1]

        expected_output_matrix = input_matrix

        params(1) = test_transpose_params(input_matrix, expected_output_matrix, "3x3 Identity")

        input_matrix(1,:) = [1,4,0]
        input_matrix(2,:) = [6,1,0]
        input_matrix(3,:) = [0,3,1]

        expected_output_matrix(1,:) = [1,6,0]
        expected_output_matrix(2,:) = [4,1,3]
        expected_output_matrix(3,:) = [0,0,1]

        params(2) = test_transpose_params(input_matrix, expected_output_matrix, "3x3 Asymmetric")
    end function test_transpose_testsuite

    !> Check for the expected output of the matrix_transforms::transpose subroutine
    @Test
    subroutine TestTranspose(this)
        !> The current test case including inputs and expected outputs
        class(test_transpose_test_case), intent(inout) :: this

        real, dimension(:,:), allocatable :: actual_output_matrix

        allocate(actual_output_matrix(size(this%params%input_matrix, 1), size(this%params%input_matrix, 2)))
        actual_output_matrix = this%params%input_matrix

        call transpose(actual_output_matrix)

        @assertEqual(this%params%expected_output_matrix, actual_output_matrix, 1e-5)
    end subroutine TestTranspose

    !> Constructor for test_transpose_test_case
    function newTest(testParameter) result(tst)
        !> The new test case
        type(test_transpose_test_case) :: tst
        !> The test parameters for the new test case
        type(test_transpose_params), intent(in) :: testParameter

        tst%params = testParameter
    end function newTest

    !> Converts test_transpose_params to a string for logging
    function test_transpose_params_toString(this) result(string)
        !> The test parameters to convert
        class(test_transpose_params), intent(in) :: this
        !> The resulting string representation
        character(:), allocatable :: string

        string = trim(this%description)
    end function test_transpose_params_toString
end module test_transpose
